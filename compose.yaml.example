services:
  database:
    image: ghcr.io/mserajnik/vmangos-database
    restart: unless-stopped
    # The healthcheck determines if the container is working as expected; if
    # the healthcheck fails it causes a restart of the container. The default
    # parameters here should work fine on most systems, but if you experience
    # any issues, you might want to adjust them. In particular, the initial
    # database creation might take a while and you may want to set
    # `start_period` even higher if you notice that the container gets
    # restarted before the initialization finishes.
    healthcheck:
      test: ['CMD', 'healthcheck.sh', '--connect', '--innodb_initialized']
      interval: 1m
      timeout: 3s
      retries: 5
      start_period: 5m # This is set relatively high to take the initial database creation into account
    volumes:
      - vmangos-database:/var/lib/mysql
      # Mount an SQL file as `/sql/world-new.sql` to force the re-creation of
      # the world database (with the contents of the mounted file); make sure
      # to remove this bind mount again before you restart the database the
      # next time or it will continue to re-create the database each time you
      # restart.
      # This can be used to update to a world database dump newer than
      # `world_full_14_june_2021`; however, to my knowledge, this should not be
      # necessary as the database migrations will keep it up to date anyway
      # (and thus, a newer dump would only reduce the time of the initial
      # creation of a fresh database because it would cause potentially lengthy
      # migrations to get skipped).
      # Therefore, this option is mainly here to have it available in case it
      # becomes necessary or desirable to re-create the world database (e.g.,
      # to cleanly get rid of any custom changes you may have made).
      # - /path/to/new/world.sql:/sql/world-new.sql:ro
    environment:
      - TZ=Etc/UTC # Change this to your desired timezone (usually you want to match your host system's timezone)
      - MARIADB_USER=mangos # Specifies the name for the database user utilized by VMaNGOS (must match the credentials in the VMaNGOS configuration files); please note that the name cannot be changed using this environment variable after the initial startup
      - MARIADB_PASSWORD=mangos # Specifies the password for the database user utilized by VMaNGOS (must match the credentials in the VMaNGOS configuration files); please note that the password cannot be changed using this environment variable after the initial startup
      - MARIADB_ROOT_PASSWORD=password # Specifies the password for the database's `root` user (not used by VMaNGOS itself, only for database creation/updates); please note that the password cannot be changed using this environment variable after the initial startup
      # vmangos-deploy keeps track of certain, unusual VMaNGOS code changes
      # (such as migration edits) that lead to a faulty (or out-of-sync) world
      # database state when updating and would normally require manual
      # intervention by you to rectify. In such cases, vmangos-deploy can
      # automatically correct the state of your world database by re-creating
      # it.
      # It is strongly suggested to keep this feature enabled, unless you apply
      # custom changes to your world database, in which case you may want to
      # disable it (by setting this environment variable to `0`) so your edits
      # are not lost whenever the database gets re-created automatically.
      # If you do decide to disable the feature, you yourself are responsible
      # for monitoring VMaNGOS for problematic code changes and taking
      # appropriate actions (e.g., manually triggering the re-creation of the
      # world database by mounting a database dump, as described further
      # above); no support will be provided in that case.
      - VMANGOS_ENABLE_AUTOMATIC_WORLD_DB_CORRECTIONS=1
      # Only a subset covering the most important realmlist parameters is
      # exposed in this configuration file. Altering them here after the
      # database has been created will _not_ update them, but you can always
      # change them (and the other parameters not exposed here) manually in the
      # database at any point (see the `phpmyadmin` service further below).
      - VMANGOS_REALMLIST_NAME=VMaNGOS # Sets the name of the realm as it appears in the selection list and the character screen
      - VMANGOS_REALMLIST_ADDRESS=127.0.0.1 # Sets the LAN or WAN address of the realm; this can also be a domain name
      - VMANGOS_REALMLIST_PORT=8085 # Sets the port of the realm; changing this means it also needs to be changed in other places
      - VMANGOS_REALMLIST_ICON=1 # Sets the icon of the realm; 0 = Normal, 1 = PvP, 6 = RP, 8 = RP PVP
      - VMANGOS_REALMLIST_TIMEZONE=0 # Sets the timezone of the realm; some common values are: 2 = United States, 3 = Oceanic, 4 = Latin America, 8 = English, 9 = German, 10 = French, 11 = Spanish, 12 = Russian
      - VMANGOS_REALMLIST_ALLOWED_SECURITY_LEVEL=0 # Sets the minimum account security level required to log in to the realm; 0 = regular players

  realmd:
    image: ghcr.io/mserajnik/vmangos-server:5875
    # If you are using a Linux host and your user's UID and GID are not 1000,
    # change these values to reflect your user's UID and GID. This will cause
    # the user in the container to use the same UID and GID and prevent
    # permission issues on the bind mounts.
    # If you are on Windows or macOS, you can ignore this.
    user: 1000:1000
    command: realmd
    # One of VMaNGOS' dependencies reserves memory based on the maximum number
    # of file descriptors per process. Under certain circumstances, Docker sets
    # a very large number by default, which can easily lead to extreme amounts
    # of memory used.
    # `nofile` is used to override the Docker default to prevent this issue
    # from happening. The chosen value (1024) is a common setting and should be
    # sufficient for most use cases. However, since this also directly limits
    # the maximum amount of concurrent players (to a number slightly lower than
    # the chosen value), you might want to choose a higher value according to
    # the amount of players you expect. Even setting a value like 65536 (64
    # times the default) should not be an issue, so in practice this should not
    # be a limiting factor.
    ulimits:
      nofile: 1024
    depends_on:
      - database
    restart: unless-stopped
    # The healthcheck determines if the container is working as expected; if
    # the healthcheck fails it causes a restart of the container. The default
    # parameters here should work fine on most systems, but if you experience
    # any issues, you might want to adjust them. In particular, the initial
    # database creation might take a while and you may want to set
    # `start_period` even higher if you notice that the container gets
    # restarted before the initialization finishes.
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '3724']
      interval: 1m
      timeout: 3s
      retries: 5
      start_period: 5m # This is set relatively high to take the initial database creation into account
    ports:
      - 3724:3724
    volumes:
      - ./config/realmd.conf:/opt/vmangos/config/realmd.conf:ro
      - ./storage/realmd/logs:/opt/vmangos/storage/logs
    environment:
      - TZ=Etc/UTC # Change this to your desired timezone (usually you want to match your host system's timezone)
      - WAIT_HOSTS=database:3306
      - WAIT_TIMEOUT=600

  mangosd:
    image: ghcr.io/mserajnik/vmangos-server:5875
    # If you are using a Linux host and your user's UID and GID are not 1000,
    # change these values to reflect your user's UID and GID. This will cause
    # the user in the container to use the same UID and GID and prevent
    # permission issues on the bind mounts.
    # If you are on Windows or macOS, you can ignore this.
    user: 1000:1000
    command: mangosd
    # One of VMaNGOS' dependencies reserves memory based on the maximum number
    # of file descriptors per process. Under certain circumstances, Docker sets
    # a very large number by default, which can easily lead to extreme amounts
    # of memory used.
    # `nofile` is used to override the Docker default to prevent this issue
    # from happening. The chosen value (1024) is a common setting and should be
    # sufficient for most use cases. However, since this also directly limits
    # the maximum amount of concurrent players (to a number slightly lower than
    # the chosen value), you might want to choose a higher value according to
    # the amount of players you expect. Even setting a value like 65536 (64
    # times the default) should not be an issue, so in practice this should not
    # be a limiting factor.
    ulimits:
      nofile: 1024
    tty: true
    stdin_open: true
    depends_on:
      - database
    restart: unless-stopped
    # `stop_grace_period` configures how long Docker waits during shutdown
    # before it kills the container. The Docker default is 10 seconds, which
    # might be too short for VMaNGOS servers with larger populations to
    # complete the shutdown tasks in time. Setting it to 2 minutes instead
    # should be on the safe side and does not have any downsides except the
    # longer wait time when the server actually hangs during shutdown. Feel
    # free to adjust this value based on the actual shutdown duration you
    # observe.
    stop_grace_period: 2m
    # The healthcheck determines if the container is working as expected; if
    # the healthcheck fails it causes a restart of the container. The default
    # parameters here should work fine on most systems, but if you experience
    # any issues, you might want to adjust them. In particular, the initial
    # database creation might take a while and you may want to set
    # `start_period` even higher if you notice that the container gets
    # restarted before the initialization finishes.
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '8085']
      interval: 1m
      timeout: 3s
      retries: 5
      start_period: 5m # This is set relatively high to take the initial database creation into account
    ports:
      - 8085:8085
      # To enable SOAP API access, set `SOAP.Enabled` to `1` and make sure
      # `SOAP.IP` is set to `0.0.0.0` and `SOAP.Port` to `7878` in your
      # `./config/mangosd.conf`, then uncomment the following port mapping:
      # - 7878:7878
      # To enable RA, set `Ra.Enable` to `1` and make sure `Ra.IP` is set to
      # `0.0.0.0` and `Ra.Port` to `3443` in your `./config/mangosd.conf`, then
      # uncomment the following port mapping:
      # - 3443:3443
    volumes:
      - ./config/mangosd.conf:/opt/vmangos/config/mangosd.conf:ro
      - ./storage/mangosd/extracted-data:/opt/vmangos/storage/data:ro
      - ./storage/mangosd/logs:/opt/vmangos/storage/logs
      - ./storage/mangosd/honor:/opt/vmangos/storage/honor
      # To enable the usage of Warden, download the Warden modules from
      # https://github.com/vmangos/warden_modules and place them into
      # `./storage/mangosd/warden-modules`.
      # Note that using HermesProxy (or projects derived from it) to connect
      # `1.14.x` clients to VMaNGOS will likely not be possible (in a stable
      # manner without getting kicked off the server) when Warden is enabled.
      # Finally, uncomment the following bind mount and (optionally) adjust
      # the Warden configuration in your `./config/mangosd.conf` (in
      # particular, ensure that `Warden.ModuleDir` is set to
      # `/opt/vmangos/storage/warden-modules`).
      # - ./storage/mangosd/warden-modules:/opt/vmangos/storage/warden-modules
    environment:
      - TZ=Etc/UTC # Change this to your desired timezone (usually you want to match your host system's timezone)
      - WAIT_HOSTS=database:3306
      - WAIT_TIMEOUT=600

  # # Optional:
  # # Uncomment this service to enable periodic database backups.
  # # The default configuration should work out of the box (unless you have
  # # modified the `database` service configuration) and will create a backup
  # # every day at 04:00 (change the `TIMEZONE` environment variable to your
  # # desired timezone). Backups older than a week will automatically get
  # # deleted.
  # # Backups will be stored in `./storage/database/backups`.
  # # See https://github.com/tiredofit/docker-db-backup#configuration for more
  # # information.
  # database-backup:
  #   image: tiredofit/db-backup
  #   depends_on:
  #     - database
  #   restart: unless-stopped
  #   volumes:
  #     - ./storage/database/backups:/backup
  #   environment:
  #     - TIMEZONE=Etc/UTC # Change this to your desired timezone (usually you want to match your host system's timezone)
  #     - CONTAINER_ENABLE_MONITORING=FALSE
  #     # If you are using a Linux host and your user's UID and GID are not 1000,
  #     # change these next two variables to reflect your user's UID and GID.
  #     # This will cause the user in the container to use the same UID and GID
  #     # and prevent permission issues on the bind mount.
  #     # If you are on Windows or macOS, you can ignore this.
  #     - USER_DBBACKUP=1000
  #     - GROUP_DBBACKUP=1000
  #     - DEFAULT_COMPRESSION=GZ
  #     - DEFAULT_BACKUP_INTERVAL=1440 # How often to run the backup in minutes; 1440 means once per day
  #     - DEFAULT_BACKUP_BEGIN=0400 # When to start the backup; 0400 means it starts at 04:00
  #     - DEFAULT_CLEANUP_TIME=10080 # How old backups have to be to get deleted; 10080 means backups older than a week get deleted
  #     - DB01_TYPE=mariadb
  #     - DB01_HOST=database
  #     - DB01_NAME=characters,realmd # Which databases should be backed up
  #     - DB01_USER=root
  #     - DB01_PASS=password # Must match the `MARIADB_ROOT_PASSWORD` environment variable of the `database` service

  # # Optional:
  # # Uncomment this service to run phpMyAdmin, a web-based MySQL/MariaDB
  # # database administration tool.
  # # This can be useful to manage accounts, make changes to the realm
  # # configuration etc.
  # # With the default configuration, you should be able to open
  # # http://localhost:8080 in your browser and have access to all of the
  # # databases VMaNGOS uses.
  # phpmyadmin:
  #   image: phpmyadmin
  #   depends_on:
  #     - database
  #   restart: unless-stopped
  #   ports:
  #     - 8080:80
  #   environment:
  #     - PMA_HOST=database
  #     - PMA_PORT=3306
  #     - PMA_USER=root
  #     - PMA_PASSWORD=password # Must match the `MARIADB_ROOT_PASSWORD` environment variable of the `database` service

volumes:
  vmangos-database:
